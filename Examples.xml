<?xml version="1.0" encoding="utf-8"?>
<Data>
  <Folders>
    <Folder>
      <Title>Programmer’s Guide</Title>
      <Description>This section includes the examples related to following topics: 

- Introduction
- Working with Image files
- Exporting Images
- Drawing Images
- Adding a Watermark to an image
- Concatenate multiple TIFF images
- Drawing Shapes
- Migrating from Earlier Versions of Aspose.Imaging</Description>
      <FolderName>ProgrammerGuide</FolderName>
      <Order>1</Order>
      <Examples>
        <Example>
          <Title>Concatenate multiple TIFF images</Title>
          <Description>Sometimes you need to concatenate a TIFF Image into another TIFF image and Aspose.Imaging supports this feature of concatenating multiple Tiff images. This example explains the TIFF image concatenation feature of Aspose.Imaging for .Net API. We will use TiffImage and TiffFrame classes to concatenate multiple TIFF images. We can use both standard methods, from file and from stream, to concatenate TIFF images.</Description>
          <FolderName>ConcatTIFFImages</FolderName>
          <Order>1</Order>
          <DocLink>
            <DisplayName>Concatenate multiple TIFF images</DisplayName>
            <Url>Concatenate+multiple+TIFF+images</Url>
          </DocLink>
          <InputFiles>
            <DataFile>
              <Path>..\Data\demo.tif</Path>
            </DataFile>
            <DataFile>
              <Path>..\Data\sample.tif</Path>
            </DataFile>
          </InputFiles>
          <OutputFiles>
            <DataFile>
              <Path>..\Data\TestDemo.tif</Path>
            </DataFile>
          </OutputFiles>
          <Type>Console</Type>
        </Example>
        <Example>
          <Title>Adding a Watermark to an image</Title>
          <Description>This example provides understanding on how to add a Watermark to an Image using Aspose.Imaging API. Adding Watermark to an image is a common requirement for Image processing applications. This example uses Graphics class to draw the string on the Image surface. To demonstrate the operation, we will load a BMP image from disk and draw a string as Watermark on Image surface using DrawString method of Graphics class.</Description>
          <FolderName>AddWatermarkToImage</FolderName>
          <Order>3</Order>
          <DocLink>
            <DisplayName>Adding a Watermark to an image</DisplayName>
            <Url>Adding+a+Watermark+to+an+image</Url>
          </DocLink>
          <InputFiles>
            <DataFile>
              <Path>..\Data\sample.bmp</Path>
            </DataFile>
          </InputFiles>
          <OutputFiles>
            <DataFile>
              <Path>..\Data\out.bmp</Path>
            </DataFile>
          </OutputFiles>
          <Type>Console</Type>
        </Example>
      </Examples>
      <Folders>
        <Folder>
          <Title>Drawing Images</Title>
          <Description>This section includes examples related to the following topics: 

- Drawing Images using core functionality 
- Drawing Images using advanced functionality</Description>
          <FolderName>DrawingImages</FolderName>
          <Order>2</Order>
          <Examples>
            <Example>
              <Title>Drawing Images using Core Functionality</Title>
              <Description>Aspose.Imaging is an imaging library that offers many valuable features including creating images from scratch. Draw using the core functionality like manipulating an image's bitmap information, or use the advanced features like Graphics and GraphicsPath to draw shapes on image surface with the help of different brushes and pens. These concepts are explained in this example in detail.</Description>
              <FolderName>DrawImagesUsingCoreFunctionality</FolderName>
              <Order>1</Order>
              <DocLink>
                <DisplayName>Drawing Images using Core Functionality</DisplayName>
                <Url>Drawing+Images+using+Core+Functionality</Url>
              </DocLink>
              <OutputFiles>
                <DataFile>
                  <Path>..\Data\sample.bmp</Path>
                </DataFile>
              </OutputFiles>
              <Type>Console</Type>
            </Example>
          </Examples>
          <Folders>
            <Folder>
              <Title>Drawing Images using Advanced Functionality</Title>
              <Description>This section includes the examples related to following topics: 

- Drawing using Graphics 
- Drawing using GraphicsPath</Description>
              <FolderName>DrawImagesUsingAdvancedFunctionality</FolderName>
              <Order>2</Order>
              <Examples>
                <Example>
                  <Title>Drawing using GraphicsPath</Title>
                  <Description>The GraphicsPath class is responsible for creating and maintaining a graphics path. The GraphicsPath has no reference to an image and does not change the image itself, instead, it can be considered an object that contains metadata that describes the paths that the Graphics class can draw.
The GraphicsPath class uses figures; each figure is either composed of a sequence of connected lines and curves or a geometric shape primitive. Each shape may be split into shape segments. You can add, remove and change different figures or shapes in a GraphicsPath object.
When the GraphicsPath has been fully described, use the corresponding Graphics class methods (DrawPath and FillPath) to draw over or fill the paths. The Graphics class takes each shape segment and draws it to produce the final image. This example demonstrating the use of the GraphicsPath class in detail.</Description>
                  <FolderName>DrawingUsingGraphicsPath</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Drawing using GraphicsPath</DisplayName>
                    <Url>http://www.aspose.com/docs/display/imagingjava/Drawing+using+GraphicsPath</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\sample.bmp</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
        <Folder>
          <Title>Exporting Images</Title>
          <Description>This section includes the examples related to following topics: 

- Exporting Image to BMP, JPEG, PNG and TIFF 
- Exporting Image to PSD</Description>
          <FolderName>ExportingImages</FolderName>
          <Order>4</Order>
          <Examples>
            <Example>
              <Title>Exporting Image to PSD</Title>
              <Description>PSD, PhotoShop document, is the default file format used by Adobe PhotoShop for working with images. Aspose.Imaging lets you save files to PSD so that they can be opened and edited in PhotoShop. This example shows how to save a file to PSD with Aspose.Imaging and discusses some of the settings that can be used when saving to this format.</Description>
              <FolderName>ExportImageToPSD</FolderName>
              <Order>1</Order>
              <DocLink>
                <DisplayName>Exporting Image to PSD</DisplayName>
                <Url>Exporting+Image+to+PSD</Url>
              </DocLink>
              <InputFiles>
                <DataFile>
                  <Path>..\Data\sample.bmp</Path>
                </DataFile>
              </InputFiles>
              <OutputFiles>
                <DataFile>
                  <Path>..\Data\output.psd</Path>
                </DataFile>
              </OutputFiles>
              <Type>Console</Type>
            </Example>
            <Example>
              <Title>Exporting Images to BMP, JPEG, PNG and TIFF Formats</Title>
              <Description>Along with a rich set of image processing routines, Aspose.Imaging provides specialized classes to convert images to other formats. Using this library, image format conversion is as simple as changing the file extension to desired format in the Image class' Save method and by specifying the appropriate SaveOptions values. In this example, a GIF image is loaded by passing the file path as a parameter to the Load method. It is then exported to various image formats using the Save method.</Description>
              <FolderName>ExportImageToDifferentFormats</FolderName>
              <Order>2</Order>
              <DocLink>
                <DisplayName>Exporting Images to BMP, JPEG, PNG and TIFF Formats</DisplayName>
                <Url>Exporting+Images+to+BMP,+JPEG,+PNG+and+TIFF+Formats</Url>
              </DocLink>
              <InputFiles>
                <DataFile>
                  <Path>..\Data\sample.gif</Path>
                </DataFile>
              </InputFiles>
              <OutputFiles>
                <DataFile>
                  <Path>..\Data\output.bmp</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\output.jpeg</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\output.png</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\output.tiff</Path>
                </DataFile>
              </OutputFiles>
              <Type>Console</Type>
            </Example>
          </Examples>
        </Folder>
      </Folders>
    </Folder>
  </Folders>
</Data>